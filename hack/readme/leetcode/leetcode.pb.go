// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hack/readme/leetcode/leetcode.proto

package login

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoginRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0d0e6ed4b39ab1, []int{0}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ListAllProblemsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAllProblemsRequest) Reset()         { *m = ListAllProblemsRequest{} }
func (m *ListAllProblemsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAllProblemsRequest) ProtoMessage()    {}
func (*ListAllProblemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0d0e6ed4b39ab1, []int{1}
}

func (m *ListAllProblemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAllProblemsRequest.Unmarshal(m, b)
}
func (m *ListAllProblemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAllProblemsRequest.Marshal(b, m, deterministic)
}
func (m *ListAllProblemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAllProblemsRequest.Merge(m, src)
}
func (m *ListAllProblemsRequest) XXX_Size() int {
	return xxx_messageInfo_ListAllProblemsRequest.Size(m)
}
func (m *ListAllProblemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAllProblemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAllProblemsRequest proto.InternalMessageInfo

type QueryProblemRequest struct {
	Slug                 string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProblemRequest) Reset()         { *m = QueryProblemRequest{} }
func (m *QueryProblemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProblemRequest) ProtoMessage()    {}
func (*QueryProblemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0d0e6ed4b39ab1, []int{2}
}

func (m *QueryProblemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProblemRequest.Unmarshal(m, b)
}
func (m *QueryProblemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProblemRequest.Marshal(b, m, deterministic)
}
func (m *QueryProblemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProblemRequest.Merge(m, src)
}
func (m *QueryProblemRequest) XXX_Size() int {
	return xxx_messageInfo_QueryProblemRequest.Size(m)
}
func (m *QueryProblemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProblemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProblemRequest proto.InternalMessageInfo

func (m *QueryProblemRequest) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

type Response struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0d0e6ed4b39ab1, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "login.LoginRequest")
	proto.RegisterType((*ListAllProblemsRequest)(nil), "login.ListAllProblemsRequest")
	proto.RegisterType((*QueryProblemRequest)(nil), "login.QueryProblemRequest")
	proto.RegisterType((*Response)(nil), "login.Response")
}

func init() {
	proto.RegisterFile("hack/readme/leetcode/leetcode.proto", fileDescriptor_ac0d0e6ed4b39ab1)
}

var fileDescriptor_ac0d0e6ed4b39ab1 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x8d, 0xd8, 0x52, 0x87, 0x42, 0x60, 0x0a, 0x25, 0x04, 0x04, 0x59, 0x2f, 0x7a, 0x49,
	0x40, 0xcf, 0x0a, 0xe2, 0x35, 0x07, 0x8d, 0x4f, 0xb0, 0x4d, 0x86, 0x1a, 0xdc, 0x64, 0xe3, 0xce,
	0xae, 0xe2, 0x0b, 0xfa, 0x5c, 0xd2, 0x65, 0xa3, 0xa1, 0xec, 0xed, 0x9f, 0x9f, 0x99, 0x7f, 0xe6,
	0x1b, 0xb8, 0x7a, 0x93, 0xcd, 0x7b, 0x69, 0x48, 0xb6, 0x3d, 0x95, 0x8a, 0xc8, 0x36, 0xba, 0xfd,
	0x17, 0xc5, 0x68, 0xb4, 0xd5, 0xb8, 0x50, 0x7a, 0xdf, 0x0d, 0xe2, 0x01, 0xd6, 0xd5, 0x41, 0xd4,
	0xf4, 0xe1, 0x88, 0x2d, 0x22, 0x9c, 0x0d, 0xb2, 0xa7, 0x2c, 0xb9, 0x4c, 0xae, 0xcf, 0x6b, 0xaf,
	0x31, 0x87, 0xd5, 0x28, 0x99, 0xbf, 0xb4, 0x69, 0xb3, 0x53, 0xef, 0xff, 0xd5, 0x22, 0x83, 0x6d,
	0xd5, 0xb1, 0x7d, 0x54, 0xea, 0xd9, 0xe8, 0x9d, 0xa2, 0x9e, 0x43, 0x92, 0xb8, 0x81, 0xcd, 0x8b,
	0x23, 0xf3, 0x1d, 0xfc, 0xd9, 0x02, 0x56, 0x6e, 0x3f, 0x2d, 0x38, 0x68, 0x21, 0x60, 0x55, 0x13,
	0x8f, 0x7a, 0x60, 0xc2, 0x2d, 0x2c, 0x0d, 0xb1, 0x53, 0x36, 0x74, 0x84, 0xea, 0xf6, 0x27, 0x81,
	0xb4, 0x0a, 0x08, 0xaf, 0x64, 0x3e, 0xbb, 0x86, 0xb0, 0x84, 0x85, 0x3f, 0x1e, 0x37, 0x85, 0xa7,
	0x29, 0xe6, 0x28, 0x79, 0x1a, 0xcc, 0x29, 0x5a, 0x9c, 0xe0, 0x13, 0xa4, 0x47, 0xd7, 0xe2, 0xc5,
	0x34, 0x1a, 0xa5, 0x88, 0x85, 0xdc, 0xc3, 0x7a, 0x0e, 0x86, 0x79, 0x68, 0x89, 0xd0, 0x46, 0xc6,
	0x77, 0x4b, 0xff, 0xff, 0xbb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xf6, 0x97, 0xc0, 0xa6,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeetcodeServiceClient is the client API for LeetcodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeetcodeServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	ListAllProblems(ctx context.Context, in *ListAllProblemsRequest, opts ...grpc.CallOption) (*Response, error)
	QueryProblem(ctx context.Context, in *QueryProblemRequest, opts ...grpc.CallOption) (*Response, error)
}

type leetcodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeetcodeServiceClient(cc *grpc.ClientConn) LeetcodeServiceClient {
	return &leetcodeServiceClient{cc}
}

func (c *leetcodeServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LeetcodeService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leetcodeServiceClient) ListAllProblems(ctx context.Context, in *ListAllProblemsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LeetcodeService/ListAllProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leetcodeServiceClient) QueryProblem(ctx context.Context, in *QueryProblemRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LeetcodeService/QueryProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeetcodeServiceServer is the server API for LeetcodeService service.
type LeetcodeServiceServer interface {
	Login(context.Context, *LoginRequest) (*Response, error)
	ListAllProblems(context.Context, *ListAllProblemsRequest) (*Response, error)
	QueryProblem(context.Context, *QueryProblemRequest) (*Response, error)
}

// UnimplementedLeetcodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLeetcodeServiceServer struct {
}

func (*UnimplementedLeetcodeServiceServer) Login(ctx context.Context, req *LoginRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedLeetcodeServiceServer) ListAllProblems(ctx context.Context, req *ListAllProblemsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProblems not implemented")
}
func (*UnimplementedLeetcodeServiceServer) QueryProblem(ctx context.Context, req *QueryProblemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProblem not implemented")
}

func RegisterLeetcodeServiceServer(s *grpc.Server, srv LeetcodeServiceServer) {
	s.RegisterService(&_LeetcodeService_serviceDesc, srv)
}

func _LeetcodeService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeetcodeServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LeetcodeService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeetcodeServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeetcodeService_ListAllProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeetcodeServiceServer).ListAllProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LeetcodeService/ListAllProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeetcodeServiceServer).ListAllProblems(ctx, req.(*ListAllProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeetcodeService_QueryProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeetcodeServiceServer).QueryProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LeetcodeService/QueryProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeetcodeServiceServer).QueryProblem(ctx, req.(*QueryProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeetcodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login.LeetcodeService",
	HandlerType: (*LeetcodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LeetcodeService_Login_Handler,
		},
		{
			MethodName: "ListAllProblems",
			Handler:    _LeetcodeService_ListAllProblems_Handler,
		},
		{
			MethodName: "QueryProblem",
			Handler:    _LeetcodeService_QueryProblem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hack/readme/leetcode/leetcode.proto",
}
